
Analytics cluster
=================

Component containers
--------------------

gcr.io/trust-networks/analytics:
  A streaming analytics configuration with the Trust Networks analytics.
  
cassandra:
  Standard Cassandra deployment
  
elasticsearch:
  Standard ElasticSearch deployment
  
cybermaggedon/gaffer:
  Gaffer (graph store).  Deployed, but not currently used.

cybermaggedon/cybermon:
  The cybermon part of the cyberprobe system.  Receives IP packets, and
  outputs events.  Here, we configure to deliver to the streaming analytics
  service.
  
kibana:
  Standard Kibana deployment.
  
cybermaggedon/sparql-cassandra:
  A SPARQL endpoint for the data we store in Cassandra.
  
gcr.io/trust-networks/web:
  Web front-end, hosts static code, and also proxies out to the other
  web-based services.

gcr.io/trust-networks/ca:
  Certificate Authority service for Trust Networks, containing the
  Trust Networks private key.  The CA container offers no external services.
  The only way to interact with it is to connect using the Google Cloud API
  for which you need a private key from the cloud project.

Container masters
-----------------

These containers are official Docker containers:
  cassandra, elasticsearch, kibana

These containers are maintained by cybermaggedon:
  cybermaggedon/gaffer, cybermaggedon/cybermon, cybermaggedon/sparql-cassandra

These containers are managed here:
  gcr.io/trust-networks/analytics
  gcr.io/trust-networks/web
  gcr.io/trust-networks/ca

Maintaining the containers
--------------------------

If you are pushing a new container, update the version.  Otherwise, Google
will cache the old version.

To change a container version, change the appropriate Makefile, and change
the image entry in analytics-deployments.yaml

Note for editing YAML files: No tabs!  All indent must be spaces!

The CA certificate
------------------

If you re-created and push new CA certificates, you will invalidate
everyone's existing certificate.  Probably best to leave certificates alone.

Certificates
------------

Best to leave the certificates alone!

Unless you need to (expiry or a security problem) in which case, you'll want
to throw the old key away and create a new one, but APPEND the new CA cert
to the certificate list, so as to do a soft changeover.  Also, you'll need
to re-issue all existing certificates.

  cd certs
  make clean
  make
  make delete
  make upload

CA container
------------

  cd ca
  make
  make push

Web container
-------------

  cd web
  make
  make push

Analytics cluster
-----------------

  cd analyics
  make
  make push
  
Deploying the cluster
---------------------

gcloud init

gcloud config set compute/zone us-east1-b

# 4 node cluster, n1-standard-4
a=https://www.googleapis.com/auth
gcloud container --project "trust-networks" clusters create "analytics" \
  --zone "us-east1-b" --machine-type "n1-standard-4" \
  --scopes "${a}/compute","${a}/devstorage.read_only","${a}/logging.write","${a}/monitoring","${a}/servicecontrol","${a}/service.management.readonly" \
  --num-nodes "4" --network "default" --enable-cloud-logging \
  --enable-cloud-monitoring
  
# 25 GB disk for Cassandra
gcloud compute --project "trust-networks" disks create "cassandra-0000" \
  --size "25" --zone "us-east1-b" --type "pd-standard"

# 25 GB disk for ES
gcloud compute --project "trust-networks" disks create "elasticsearch-0000" \
  --size "25" --zone "us-east1-b" --type "pd-standard"

# 25 GB disk for Gaffer
gcloud compute --project "trust-networks" disks create "gaffer-0000" \
  --size "25" --zone "us-east1-b" --type "pd-standard"

# 1 GB disk for CA
gcloud compute --project "trust-networks" disks create "ca-0000" \
  --size "1" --zone "us-east1-b" --type "pd-standard"

# 1 GB disk for VPN CA
gcloud compute --project "trust-networks" disks create "vpn-ca-data-0000" \
  --size "1" --zone "us-east1-b" --type "pd-standard"

gcloud container clusters get-credentials analytics \
  --zone us-east1-b --project trust-networks

# For this step, you need to have an appropriate private.json key file
# from the Google cloud console.  The key file is for a service with the
# appropriate permissions.
kubectl create secret generic keys --from-file=private.json

kubectl create -f analytics-services.yaml

kubectl create -f analytics-deployments.yaml

Upgrading the cluster
---------------------

Easiest way, you can just delete the particular deployment and re-create e.g.

  kubectl delete deployment analytics
  kubectl create -f analytics-deployments.yaml

The create command ignores deployments which already exist.

More elaborate options e.g. rolling upgrades are possible, but you need to
read the documentation.

Deleting the cluster
--------------------

# Tidy up

kubectl delete -f analytics-services.yaml
kubectl delete -f analytics-deployments.yaml

gcloud compute --project "trust-networks" disks delete --zone "us-east1-b" \
       gaffer-0000  elasticsearch-0000 cassandra-0000 ca-0000 vpn-ca-data-0000

