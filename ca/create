#!/bin/bash

if [ $# -ne 2 ]
then
    echo 'Usage:' 1>&2
    echo '  create "Full Name" full.name@trustnetworks.com' 1>&2
    exit 1
fi

# Create a randomish password.
PASSWORD=$(uuidgen | cut -d- -f1)

# RSA key size.
KEY_SIZE=4096

# Random generation parameters.
RAND_COUNT=64
RAND_BLOCK=16
RANDOM_DEVICE=/dev/urandom
DD="dd iflag=fullblock"

# Certificates valid for 2 years.
CERT_VALIDITY=710

mkdir -p /ca 1>/dev/null

# Temporary files.
RAND_FILE=/ca/RAND.user$$
KEY_FILE=/ca/KEY.user$$
REQ_FILE=/ca/REQ.user$$
CONFIG_FILE=/ca/CONFIG.user$$

# Output files.
CERT_FILE=/ca/CERT.user$$
PKG_FILE=/ca/PKG.user$$

# Create config file

name=$1
email=$2

cat <<EOT >> ${CONFIG_FILE}
[req]
distinguished_name=dn
prompt=no

[dn]
commonName=${name}
organizationalUnitName=Users
organizationName=Trust Networks
emailAddress=${email}
EOT

# Create random data.
echo '**** Create random data...'
${DD} bs=${RAND_BLOCK} count=${RAND_COUNT} if=${RANDOM_DEVICE} of=${RAND_FILE}
if [ $? -ne 0 ]
then
    echo Random creation failed. 1>&2
    exit 1
fi

# Create private key.
echo '**** Generate private key...'
openssl genrsa -out ${KEY_FILE} -rand ${RAND_FILE} ${KEY_SIZE}
if [ $? -ne 0 ]
then
    echo Private key generation failed. 1>&2
    exit 1
fi

# Discard random.
rm -f ${RAND_FILE}

# Create certificate request.
echo '**** Generate certificate request...'
openssl req -key ${KEY_FILE} -out ${REQ_FILE} -new \
	-config ${CONFIG_FILE}
if [ $? -ne 0 ]
then
    echo Certificate request creation failed. 1>&2
    exit 1
fi

rm -f ${CONFIG_FILE}

echo '**** Signing request...'
# Sign certificate request to create certificate.
openssl x509 -req -in ${REQ_FILE} -CAkey /cert/key.ca \
	-CA /cert/cert.ca -CAcreateserial -CAserial SERIAL \
	-out ${CERT_FILE} -days ${CERT_VALIDITY} \
	-addtrust clientAuth
if [ $? -ne 0 ]
then
    echo Certificate signing failed. 1>&2
    exit 1
fi

# Delete request.
rm -f ${REQ_FILE}

# Verify.
echo '**** Verify certificate...'
openssl verify -CAfile /cert/cert.ca ${CERT_FILE}
if [ $? -ne 0 ]
then
    echo Certificate verification failed. 1>&2
    exit 1
fi

# Create PKCS12 package.
echo '**** Create key/certificate package...'
openssl pkcs12 -export -passout pass:${PASSWORD} -inkey ${KEY_FILE} \
	-in ${CERT_FILE} -caname 'Trust Networks' \
	-certfile /cert/cert.ca -out ${PKG_FILE}
if [ $? -ne 0 ]
then
    echo Package creation failed. 1>&2
    exit 1
fi

(
    openssl x509 -in ${CERT_FILE}  -noout -serial -email -subject -dates
    echo '----'
) >> REGISTER

# Remove stuff not needed.
rm -f ${KEY_FILE}

echo '**** All complete.'

echo PKCS12 package is in ${PKG_FILE}.
echo Password is ${PASSWORD}.

